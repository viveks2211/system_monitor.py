import psutil
import logging
from datetime import datetime
import time  

logging.basicConfig(
    filename="system_health.log",
    level=logging.WARNING,
    format="%(asctime)s - %(levelname)s - %(message)s"
)


CPU_THRESHOLD = 80  # CPU usage threshold in %
MEMORY_THRESHOLD = 80  # Memory usage threshold in %
DISK_THRESHOLD = 80  # Disk usage threshold in %
PROCESS_THRESHOLD = 200  # Maximum number of processes allowed

def log_and_print_alert(message):
    """Log the alert to both console and log file."""
    print(message)
    logging.warning(message)

def check_cpu_usage():
    """Check CPU usage and log alert if it exceeds the threshold."""
    cpu_usage = psutil.cpu_percent(interval=1)
    if cpu_usage > CPU_THRESHOLD:
        log_and_print_alert(f"ALERT: CPU usage is high! Usage: {cpu_usage}%")

def check_memory_usage():
    """Check memory usage and log alert if it exceeds the threshold."""
    memory = psutil.virtual_memory()
    if memory.percent > MEMORY_THRESHOLD:
        log_and_print_alert(f"ALERT: Memory usage is high! Usage: {memory.percent}%")

def check_disk_usage():
    """Check disk space usage and log alert if it exceeds the threshold."""
    disk = psutil.disk_usage('/')
    if disk.percent > DISK_THRESHOLD:
        log_and_print_alert(f"ALERT: Disk usage is high! Usage: {disk.percent}%")

def check_running_processes():
    """Check the number of running processes and log alert if it exceeds the threshold."""
    process_count = len(psutil.pids())
    if process_count > PROCESS_THRESHOLD:
        log_and_print_alert(f"ALERT: Too many processes! Running: {process_count} processes")

def monitor_system():
    """Continuously monitor the system's health."""
    print("Starting system health monitoring...")
    while True:
        check_cpu_usage()
        check_memory_usage()
        check_disk_usage()
        check_running_processes()
        print(f"Health check completed at {datetime.now()}.\n")
        time.sleep(10)  # Wait for 10 seconds before the next check

if __name__ == "__main__":
    monitor_system()
